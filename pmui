#!/usr/bin/env perl
use Mojolicious::Lite;
use lib "$ENV{'HOME'}/dev/Video-PlaybackMachine/lib";

use Video::PlaybackMachine::Schema;
use Video::PlaybackMachine::DirectoryScanner;
use DateTime;
use DateTime::Format::DateParse;
use Video::PlaybackMachine::Config;

app->secret('aeHeer8e');

helper 'config' => sub {
    return Video::PlaybackMachine::Config->config();
};

helper 'timefmt' => sub {
    my $self = shift;
    my ($raw_time) = @_;

    my $dt = DateTime->from_epoch( epoch => $raw_time );

    $dt->set_time_zone( $self->config->time_zone() );
    return $dt->ymd . " " . $dt->hms;
};

helper 'schema' => sub {
    my $self = shift;

    my $schema = Video::PlaybackMachine::Schema->connect(
        "dbi:SQLite:dbname=" . $self->config->database(),
        '', '' );

    return $schema;
};

helper 'schedule' => sub {
    my $self = shift;

    my $schedule_name = $self->param('schedulename') // $self->config->schedule;
    my $schedule =
      $self->schema->resultset('Schedule')->find( { name => $schedule_name } );
    return $schedule;

};

helper 'scanner' => sub {
    my $self = shift;

    my $scanner = Video::PlaybackMachine::DirectoryScanner->new(
        'directories'   => [ $self->config->movies() ],
        'schedule_name' => $self->config->schedule(),
        'schema'        => $self->schema()
    );
    return $scanner;
};

helper 'movieinfo' => sub {
    my $self = shift;

    my $movie_info_rs = $self->schema->resultset('MovieInfo');

    return $movie_info_rs;

};

get '/' => sub {
    my $self = shift;

    $self->scanner()->scan();

    $self->stash( 'schedule', $self->schedule() );

    $self->stash( 'movies', $self->movieinfo() );

    $self->render('index');
};

post '/schedule_entry' => sub {
    my $self = shift;

    $self->param('start_time') or die "No start time";

    my $start_time_dt =
      DateTime::Format::DateParse->parse_datetime( $self->param('start_time'),
        $self->config->time_zone() )
      or die "Invalid start time ", $self->param('start_time');

    my $mrl = $self->param('movie') or die "No MRL";
    
	my $movie_info = $self->movieinfo->find( { mrl => $mrl } )
	  or die "Couldn't find movie for mrl '$mrl'";

    my @conflicts = $self->schedule->movie_conflicts( 
    	$start_time_dt->epoch(),
    	$movie_info->duration()
    );
    
    if (scalar @conflicts) {
		die "Movie '" . $movie_info->title() . "' conflicts with: ",
			join(', ', map { $_->mrl() } @conflicts ),
			"\n";
    }

    $self->schema->txn_do(
        sub {

            my $schedule_row =
              $self->schema->resultset('ScheduleEntry')->create(
                {
                    'start_time'  => $start_time_dt->epoch(),
                    'mrl'         => $mrl,
                    'schedule_id' => $self->schedule->schedule_id
                }
              );

            my $schedule_end_row =
              $self->schema->resultset('ScheduleEntryEnd')->create(
                {
                    'stop_time' => $start_time_dt->epoch() +
                      $movie_info->duration(),
                    'schedule_entry_id' => $schedule_row->schedule_entry_id()
                }
              );
        }
    );

    $self->redirect_to('/');
};

app->start;
__DATA__

@@ index.html.ep
% layout 'default';
% title 'PM Scheduler';
<h2><%= $schedule->name() %></h2>

<table>
<tr><th>Start</th><th>Title</th><th>End</th></tr>
% foreach my $entry ( $schedule->schedule_entries_in_order() ) {
<tr>
<td><%= timefmt( $entry->start_time ) %></td>
<td><%= $entry->movie_info->title() %></td>
<td><%= timefmt( $entry->schedule_entry_end->stop_time ) %></td>
</tr>
% }
</table>
%= form_for '/schedule_entry' => ( method => 'POST' ) => begin
  %= datetime_field 'start_time'
  %= select_field movie => [ map { [ $_->title => $_->mrl ] } $movies->all() ]
  %= submit_button 'add'
%end


@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>
